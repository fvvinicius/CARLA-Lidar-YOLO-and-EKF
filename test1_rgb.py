import glob
import os
import sys

import carla

import random
import time
import numpy as np
import cv2
import open3d as o3d
import matplotlib.pyplot as plt
from matplotlib import cm
import time
import xml.etree.ElementTree as ET
import tensorflow as tf

from sensor_fusion import IMUDATA, GNSSDATA, imu_callback, imu2_callback, gnss_callback, gnss_to_xyz, _get_latlon_ref
from RGB import rgb_callback, predict_light, label_dict, red_light_flag
import math
from lidar import add_open3d_axis, lidar_callback, check_obstacle_ahead, VIRIDIS, VID_RANGE


try:
    sys.path.append(glob.glob('../carla/dist/carla-*%d.%d-%s.egg' % (
        sys.version_info.major,
        sys.version_info.minor,
        'win-amd64' if os.name == 'nt' else 'linux-x86_64'))[0])
except IndexError:
    pass



def main():
    actor_list = []
    OBSTACLE_LIST = [0]
    OBSTACLE_LIST1 = []
    REAL_VEL = []
    BRAKES = []
    timestamps0 = []

    # In this tutorial script, we are going to add a vehicle to the simulation
    # and let it drive in autopilot. We will also create a camera attached to
    # that vehicle, and save all the images generated by the camera to disk.

    try:
        noise_seed = '0'
        client = carla.Client('localhost', 2000)
        client.set_timeout(4.0)
        
        
        
        

        world = client.get_world()
        # Set up a fixed timestep for the simulation
        dt = 0.02
        temp = world.get_settings()
        temp.fixed_delta_seconds = dt
        world.apply_settings(temp)  
        
        
        # Startup the library
        blueprint_library = world.get_blueprint_library()

        # Pull Mustang from the library
        bp = random.choice(blueprint_library.filter('vehicle.ford.mustang'))
        
        # Set random color to the Mustang
        if bp.has_attribute('color'):
            color = random.choice(bp.get_attribute('color').recommended_values)
            bp.set_attribute('color', color)

        # Pull spawn points and assign one to the vehicle then spawn
        spawn_points = world.get_map().get_spawn_points()
        # transform = random.choice(spawn_points)
        transform = spawn_points[0]

        vehicle = world.spawn_actor(bp, transform)
        actor_list.append(vehicle)
        print('created %s' % vehicle.type_id)
        
        vehicle.set_autopilot(False)
        #Set Up LIDAR
        lidar_bp = blueprint_library.find('sensor.lidar.ray_cast') 
        lidar_bp.set_attribute('range', '100.0')
        lidar_bp.set_attribute('noise_stddev', '0.1')
        lidar_bp.set_attribute('upper_fov', '15.0')
        lidar_bp.set_attribute('lower_fov', '-25.0')
        lidar_bp.set_attribute('channels', '64.0')
        lidar_bp.set_attribute('rotation_frequency', '20.0')
        lidar_bp.set_attribute('points_per_second', '500000')
        # lidar_bp.set_attribute('sensor_tick', str(1.0 / 5.))
        
        point_list = o3d.geometry.PointCloud()
        lidar_init_trans = carla.Transform(carla.Location(z=2))
        lidar = world.spawn_actor(lidar_bp, lidar_init_trans, attach_to=vehicle)
        actor_list.append(lidar)
        print('created %s' % lidar.type_id)
        
        lidar.listen(lambda data: lidar_callback(data, point_list, OBSTACLE_LIST))
        
        # Open3D visualiser for LIDAR and RADAR
        vis = o3d.visualization.Visualizer()
        vis.create_window(
            window_name='Carla Lidar',
            width=960,
            height=540,
            left=480,
            top=270)
        vis.get_render_option().background_color = [0.05, 0.05, 0.05]
        vis.get_render_option().point_size = 1
        vis.get_render_option().show_coordinate_frame = True
        add_open3d_axis(vis)
        
        # Update geometry and camera in game loop
        frame = 0
        
        # Move the spectator behind the vehicle to view it
        spectator = world.get_spectator() 
        transform = carla.Transform(vehicle.get_transform().transform(carla.Location(x=-4,z=2.5)),vehicle.get_transform().rotation) 
        spectator.set_transform(transform)
        
        actor_list.append(spectator)

        
        control = vehicle.get_control()
        


       
        
        transform.location.x += 50
        bp = random.choice(blueprint_library.filter('vehicle.tesla.cybertruck'))
        npc = world.try_spawn_actor(bp, transform)
        if npc is not None:
            actor_list.append(npc)
            npc.set_autopilot(False)
            print('created %s' % npc.type_id)
            
            
 

        control.throttle = .45
        vehicle.apply_control(control)
        
        
        t_end = time.time() + (60 * 10)

        
        t_old = world.get_snapshot().timestamp.elapsed_seconds
        i = 1
        t_s = 0
        
        while time.time() < t_end:
            if frame == 2:
                vis.add_geometry(point_list)
                # vis.add_geometry(radar_list)
            vis.update_geometry(point_list)
            # vis.update_geometry(radar_list)
            real_vel = transform.transform_vector(vehicle.get_velocity())
            vel = (real_vel - carla.Vector3D(x=0, y=0, z=real_vel.z)).length()
            REAL_VEL.append(vel)
            t = world.get_snapshot().timestamp.elapsed_seconds
            
            timestamps0.append(t)
            BRAKES.append(vehicle.get_control().brake)
            obstacle_ahead = OBSTACLE_LIST[-1]
            OBSTACLE_LIST1.append(obstacle_ahead)
            # Check for obstacles in front of the vehicle using LIDAR data
           
            
            vis.poll_events()
            vis.update_renderer()
            # # This can fix Open3D jittering issues:
            time.sleep(0.005)
            frame += 1
            
            
            # print(OBSTACLE_LIST)
            if (obstacle_ahead==1):
                
                control = vehicle.get_control()
                control.throttle = 0.
                control.brake = 1.
                vehicle.apply_control(control)
                t_s = t
            else:
                if t > t_s+1:
                    control = vehicle.get_control()
                    control.brake = 0.
                    control.throttle = .45
                    vehicle.apply_control(control)


    finally:

        print('destroying actors')
        lidar.stop()
        lidar.destroy()
        
        for x in actor_list:
            print('destroying ', x)   
            carla.command.DestroyActor(x)
            
        print('done.')

        plt.figure(figsize=(10, 6))
        plt.plot(timestamps0, REAL_VEL, label='Velocity (m/s)',marker='o', markevery = 75,color='green')
        plt.plot(timestamps0, OBSTACLE_LIST1, label='Obstacle?',marker='x', markevery = 75, color='red')
        plt.plot(timestamps0, BRAKES, label = 'Brake', marker = 'd', markevery = 75, color='black')
        plt.title('States vs Timestamp')
        plt.xlabel('t(s)')
        plt.ylabel('State')
        plt.legend()
        plt.show()
if __name__ == '__main__':

    main()
